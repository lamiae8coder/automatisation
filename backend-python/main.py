from fastapi import FastAPI, Depends, HTTPException, Body, Request
from sqlalchemy.orm import Session
from database import SessionLocal, engine
from models import Base, Person, ImportedShapefile,Affaire, Image, DesignatedShape
from schemas import PersonCreate, AffaireCreate, ImageCreate
import logging
from fastapi.middleware.cors import CORSMiddleware 
from fastapi import FastAPI, UploadFile, File, Form
import shapefile
import zipfile
import os, shutil
import json
from shapely.geometry import shape, mapping, Point, Polygon
import geopandas as gpd
import rarfile
from pathlib import Path
from fastapi.staticfiles import StaticFiles
from routers import image
from shapely.geometry import shape
from geoalchemy2.shape import from_shape
from geoalchemy2 import Geometry
from geoalchemy2.elements import WKTElement
from fastapi.responses import JSONResponse
import ezdxf
from fastapi.responses import FileResponse
from math import cos, sin, pi




app = FastAPI()
app.mount("/uploads", StaticFiles(directory="uploads"), name="uploads")
app.include_router(image.router) 

# Cr√©ation de l'application FastAPI


# Configuration CORS - Doit venir APR√àS la cr√©ation de l'app
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # √Ä restreindre en production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Cr√©ation des tables
Base.metadata.create_all(bind=engine)

# D√©pendance pour la base de donn√©es
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()




@app.post("/affaire", status_code=201)
def create_affaire(affaire: AffaireCreate, db: Session = Depends(get_db)):
    try:
       

        db_affaire = Affaire(
            titremec=affaire.titremec,
            proprietefr=affaire.proprietefr,
            proprietear=affaire.proprietear,
            plandate=affaire.plandate,
            situationfr=affaire.situationfr,
            situationar=affaire.situationar,
            mappecadre=affaire.mappecadre,
            datemec=affaire.datemec,
            mappereperage=affaire.mappereperage,
            titreorigine=affaire.titreorigine,
            nometprenom=affaire.nometprenom,
            cin=affaire.cin,
            naturetravail=affaire.naturetravail,
            servicecadastre=affaire.servicecadastre,
            surface=affaire.surface,
            numerosd=affaire.numerosd,
            empietement=affaire.empietement,
            # surfaceempietement=affaire.surfaceempietement,
            surfaceempietement = affaire.surfaceempietement if affaire.empietement else None,

            consistance=affaire.consistance,
            charges=affaire.charges,
            qualite=affaire.qualite

         
        
        )
        db.add(db_affaire)
        db.commit()
        db.refresh(db_affaire)
        return {
            "message": "aAffaire ajout√©e avec succ√®s.",
            "titreMec": db_affaire.titremec,
            "id":db_affaire.id
            
            
        }
    except HTTPException:
        raise  # On rel√®ve les HTTPException d√©j√† g√©r√©es
    except Exception as e:
        db.rollback()
        logger.error(f"Erreur DB : {str(e)}", exc_info=True)
        raise HTTPException(
            status_code=500,
            detail="Erreur interne du serveur lors de la cr√©ation"
        )


@app.post("/image", status_code=201)
def create_image(image: ImageCreate, db: Session = Depends(get_db)):
    try:
       

        db_image = Image(
            affaire_id=image.affaire_id,
            file_path=image.file_path,
            type=image.type
            
        
        )
        db.add(db_image)
        db.commit()
        db.refresh(db_image)
        return {
            "message": "Image ajout√©e avec succ√®s.",
            "type": db_image.type,
            "id":db_image.id
            
            
        }
    except HTTPException:
        raise  # On rel√®ve les HTTPException d√©j√† g√©r√©es
    except Exception as e:
        db.rollback()
        logger.error(f"Erreur DB : {str(e)}", exc_info=True)
        raise HTTPException(
            status_code=500,
            detail="Erreur interne du serveur lors de la cr√©ation"
        )







# temp_polygon_gdf = None

# @app.post("/save-polygon/")
# async def save_polygon(request: Request):
#     global temp_polygon_gdf
#     data = await request.json()
#     print("üì® Donn√©es GeoJSON re√ßues :", data)

#     try:
#         gdf = gpd.GeoDataFrame.from_features([{
#             "type": "Feature",
#             "geometry": data["geometry"],
#             "properties": data.get("properties", {})
#         }], crs="EPSG:26191")

#         temp_polygon_gdf = gdf  # Stockage dans variable globale en m√©moire

#         print("‚úÖ Polygone converti en GeoDataFrame :")
#         print(gdf)

#         # Tu peux aussi sauvegarder sur disque si tu veux, par ex:
#         gdf.to_file("polygon_output.shp")

#         # Message de validation d√©taill√© (extrait WKT r√©sum√©)
#         poly_wkt = gdf.geometry.iloc[0].wkt
#         poly_preview = poly_wkt[:60] + "..." if len(poly_wkt) > 60 else poly_wkt

#         return {
#             "message": "Polygone sauvegard√© et import√© avec succ√®s.",
#             "polygon_preview": poly_preview
#         }

#     except Exception as e:
#         print("‚ùå Erreur de traitement :", e)
#         return {"error": str(e)}


@app.post("/save-polygon/")
async def save_polygon(request: Request):
    data = await request.json()
    geometry = data.get("geometry")
    affaire_id = data.get("affaire_id")

    if not geometry:
        return {"error": "Aucune g√©om√©trie fournie."}

    try:
        # üîÅ Convertir le GeoJSON en g√©om√©trie Shapely
        shapely_geom = shape(geometry)

        # üéØ Cr√©er un WKTElement compatible PostGIS avec le bon SRID
        geom_wkt = WKTElement(shapely_geom.wkt, srid=26191)  # adapte le SRID si n√©cessaire

        # üì¶ Enregistrer dans la base
        with SessionLocal() as db:
            shape_entry = DesignatedShape(
                affaire_id=affaire_id,
                # affaire_id=1,  # √† remplacer dynamiquement si besoin
                source_file="dessin manuel",
                geom=geom_wkt
            )
            db.add(shape_entry)
            db.commit()
            db.refresh(shape_entry)

        return {
            "message": "‚úÖ Polygone sauvegard√© dans la base de donn√©es.",
            "id": shape_entry.id
        }

    except Exception as e:
        return {"error": str(e)}

# images






# Upload endpoint
@app.post("/upload-image/")
async def upload_image(
    affaire_id: int = Form(...),
    type: str = Form(...),
    file: UploadFile = File(...)
):
    upload_dir = "uploads"
    os.makedirs(upload_dir, exist_ok=True)
    file_location = os.path.join(upload_dir, file.filename)

    with open(file_location, "wb") as buffer:
        shutil.copyfileobj(file.file, buffer)

    # Save to DB
    db = SessionLocal()
    image = Image(affaire_id=affaire_id, file_path=file_location, type=type)
    db.add(image)
    db.commit()
    db.refresh(image)
    db.close()

    return {"message": "Image uploaded", "id": image.id}















@app.post("/upload-shapefile/")
async def upload_shapefile(file: UploadFile = File(...)):
    global temp_polygon_gdf

    # V√©rification du polygone temporaire
    if temp_polygon_gdf is None:
        return {"error": "Aucun polygone n‚Äôa √©t√© re√ßu. Veuillez d'abord dessiner un polygone."}

    try:
        # ‚úÖ Calcul du buffer de 300m autour du polygone (et pas du centro√Øde)
        buffer_geom = temp_polygon_gdf.geometry.buffer(10).iloc[0]
    except Exception as e:
        return {"error": f"Erreur lors du calcul du buffer : {e}"}

    # üîπ Sauvegarde temporaire du fichier ZIP
    zip_path = f"temp/{file.filename}"
    os.makedirs('temp', exist_ok=True)

    with open(zip_path, "wb") as f:
        f.write(await file.read())

    # üîπ Extraction du ZIP
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall("temp/extracted")

    # üîπ Recherche du fichier .shp
    shp_file = None
    for root, _, files in os.walk("temp/extracted"):
        for f_name in files:
            if f_name.endswith('.shp'):
                shp_file = os.path.join(root, f_name)
                break
        if shp_file:
            break

    if not shp_file:
        return {"error": "Fichier .shp non trouv√© dans le ZIP."}

    try:
        # ‚úÖ Lecture avec geopandas
        shapefile_gdf = gpd.read_file(shp_file)

        # ‚úÖ Assure-toi que la projection est correcte
        if shapefile_gdf.crs != "EPSG:26191":
            shapefile_gdf = shapefile_gdf.to_crs("EPSG:26191")

        # ‚úÖ Filtrage spatial : entit√©s intersectant le buffer
        # filtered_gdf = shapefile_gdf[shapefile_gdf.intersects(buffer_geom)]
        filtered_gdf = shapefile_gdf[
            shapefile_gdf.intersects(buffer_geom) & 
            ~shapefile_gdf.within(temp_polygon_gdf.geometry.iloc[0])
        ]

        print(f"‚úÖ {len(filtered_gdf)} entit√©s intersectent le buffer de 10‚ÄØm.")

        # ‚úÖ Conversion en GeoJSON
        geojson = json.loads(filtered_gdf.to_json())

        return geojson

    except Exception as e:
        print(f"‚ùå Erreur de traitement du shapefile : {e}")
        return {"error": str(e)}








from fastapi import UploadFile, File
import os, zipfile, json
import geopandas as gpd
import rarfile
from pathlib import Path

# @app.post("/upload-shapefilee/")
# async def upload_shapefilee(file: UploadFile = File(...)):
#     global temp_polygon_gdf

#     # üîç V√©rification du polygone temporaire
#     if temp_polygon_gdf is None:
#         return {"error": "Aucun polygone n‚Äôa √©t√© re√ßu. Veuillez d'abord dessiner un polygone."}

#     try:
#         # ‚úÖ Calcul du buffer de 300m autour du polygone
#         buffer_geom = temp_polygon_gdf.geometry.buffer(300).iloc[0]
#     except Exception as e:
#         return {"error": f"Erreur lors du calcul du buffer : {e}"}

#     # üìÅ Pr√©paration des dossiers
#     os.makedirs("temp", exist_ok=True)
#     os.makedirs("temp/extracted", exist_ok=True)

#     # üîΩ D√©tails du fichier
#     filename = file.filename
#     ext = Path(filename).suffix.lower()
#     archive_path = os.path.join("temp", filename)

#     # üì• Sauvegarde temporaire
#     with open(archive_path, "wb") as f:
#         f.write(await file.read())

#     try:
#         # üì¶ Extraction selon le type (ZIP ou RAR)
#         if ext == ".zip":
#             with zipfile.ZipFile(archive_path, 'r') as zip_ref:
#                 zip_ref.extractall("temp/extracted")
#         elif ext == ".rar":
#             with rarfile.RarFile(archive_path, 'r') as rar_ref:
#                 rar_ref.extractall("temp/extracted")
#         else:
#             return {"error": "Format de fichier non pris en charge. Seuls .zip et .rar sont accept√©s."}
#     except Exception as e:
#         return {"error": f"Erreur lors de l‚Äôextraction de l‚Äôarchive : {e}"}

#     # üîç Recherche du fichier .shp
#     shp_file = None
#     for root, _, files in os.walk("temp/extracted"):
#         for f_name in files:
#             if f_name.endswith(".shp"):
#                 shp_file = os.path.join(root, f_name)
#                 break
#         if shp_file:
#             break

#     if not shp_file:
#         return {"error": "Fichier .shp non trouv√© dans l‚Äôarchive."}

#     try:
#         # ‚úÖ Lecture du shapefile
#         shapefile_gdf = gpd.read_file(shp_file)

#         # ‚úÖ Projection correcte
#         if shapefile_gdf.crs != "EPSG:26191":
#             shapefile_gdf = shapefile_gdf.to_crs("EPSG:26191")

#         # ‚úÖ Filtrage spatial : intersecte buffer et hors polygone
#         filtered_gdf = shapefile_gdf[
#             shapefile_gdf.intersects(buffer_geom) &
#             ~shapefile_gdf.within(temp_polygon_gdf.geometry.iloc[0])
#         ]

#         print(f"‚úÖ {len(filtered_gdf)} entit√©s intersectent le buffer de 300‚ÄØm.")

#         # ‚úÖ Retour du GeoJSON
#         geojson = json.loads(filtered_gdf.to_json())
#         return geojson

#     except Exception as e:
#         print(f"‚ùå Erreur de traitement du shapefile : {e}")
#         return {"error": str(e)}


from shapely.geometry import MultiPolygon, Polygon

def ensure_multipolygon(geom):
    """
    Assure que la g√©om√©trie est un MultiPolygon.
    Si c‚Äôest un Polygon, le convertit.
    Sinon, retourne None.
    """
    if isinstance(geom, Polygon):
        return MultiPolygon([geom])
    elif isinstance(geom, MultiPolygon):
        return geom
    else:
        return None


@app.post("/upload-shapefilee/")
async def upload_shapefilee(file: UploadFile = File(...), db: Session = Depends(get_db)):
    # üìÅ Cr√©ation des dossiers temporaires
    os.makedirs("temp", exist_ok=True)
    os.makedirs("temp/extracted", exist_ok=True)

    filename = file.filename
    ext = Path(filename).suffix.lower()
    archive_path = os.path.join("temp", filename)

    # üìÖ Sauvegarde temporaire
    with open(archive_path, "wb") as f:
        f.write(await file.read())

    # üìÜ Extraction de l'archive
    try:
        if ext == ".zip":
            with zipfile.ZipFile(archive_path, 'r') as zip_ref:
                zip_ref.extractall("temp/extracted")
        elif ext == ".rar":
            with rarfile.RarFile(archive_path, 'r') as rar_ref:
                rar_ref.extractall("temp/extracted")
        else:
            return {"error": "Format non support√© (ZIP ou RAR uniquement)."}
    except Exception as e:
        return {"error": f"Erreur d'extraction : {e}"}

    # üîç Trouver le fichier .shp
    shp_file = None
    for root, _, files in os.walk("temp/extracted"):
        for f_name in files:
            if f_name.endswith(".shp"):
                shp_file = os.path.join(root, f_name)
                break
        if shp_file:
            break

    if not shp_file:
        return {"error": "Fichier .shp non trouv√©."}

    try:
        shapefile_gdf = gpd.read_file(shp_file)

        if shapefile_gdf.crs != "EPSG:26191":
            shapefile_gdf = shapefile_gdf.to_crs("EPSG:26191")

        # üîç R√©cup√©ration du dernier shape enregistr√© pour affaire
        latest_shape = db.query(DesignatedShape).order_by(DesignatedShape.id.desc()).first()
        if not latest_shape:
            return {"error": "Aucun polygone de base (DesignatedShape) n'a √©t√© trouv√©."}

        affaire_id = latest_shape.affaire_id
        buffer_geom = shape(json.loads(db.scalar(latest_shape.geom.ST_AsGeoJSON()))).buffer(300)

        # ‚úÖ Filtrer par intersection avec buffer mais hors polygone
        filtered_gdf = shapefile_gdf[
            shapefile_gdf.intersects(buffer_geom) &
            ~shapefile_gdf.within(shape(json.loads(db.scalar(latest_shape.geom.ST_AsGeoJSON()))))
        ]

        # üö´ Si vide : retourner un message sans erreur
        if filtered_gdf.empty:
            return {"message": "Aucune entit√© √† importer selon les crit√®res spatiaux."}

        # üìÜ Enregistrement dans la table imported_shapefiles
        for _, row in filtered_gdf.iterrows():
            geom_mp = ensure_multipolygon(row.geometry)
            if geom_mp is None:
                continue

            geom_wkt = WKTElement(geom_mp.wkt, srid=26191)
            entry = ImportedShapefile(
                affaire_id=affaire_id,
                file_name=Path(shp_file).name,
                geom=geom_wkt
            )
            db.add(entry)

        db.commit()
        geojson = json.loads(filtered_gdf.to_json())
        return JSONResponse(content=geojson)

    except Exception as e:
        return {"error": f"Erreur lors du traitement : {e}"}
    finally:
        # ‚úÖ Nettoyage du dossier "temp/extracted" apr√®s traitement
        try:
            shutil.rmtree("temp/extracted")
        except Exception as cleanup_err:
            print(f"‚ö†Ô∏è Erreur lors du nettoyage : {cleanup_err}")






# Point de terminaison pour v√©rifier que l'API fonctionne
@app.get("/health")
def health_check():
    return {"status": "OK"}

# Ex√©cution de l'application
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)



# dxf to shp




# @app.post("/convert-dxf-to-shp/")
# async def convert_dxf_to_shp(file: UploadFile = File(...)):
#     # üîΩ Sauvegarde temporaire du DXF
#     dxf_path = os.path.join(OUTPUT_FOLDER, file.filename)
#     with open(dxf_path, "wb") as f:
#         f.write(await file.read())

#     # üìÇ Dossier de sortie
#     base_name = os.path.splitext(file.filename)[0]
#     shp_folder = os.path.join(OUTPUT_FOLDER, base_name)
#     os.makedirs(shp_folder, exist_ok=True)

#     shp_path = os.path.join(shp_folder, base_name)

#     # üìù Cr√©e shapefile
#     writer = shapefile.Writer(shp_path)
#     writer.field("LAYER", "C")

#     # üìê Lecture DXF
#     doc = ezdxf.readfile(dxf_path)
#     msp = doc.modelspace()

#     for e in msp:
#         if e.dxftype() == "LINE":
#             start = e.dxf.start
#             end = e.dxf.end
#             writer.line([[[start.x, start.y], [end.x, end.y]]])
#             writer.record(e.dxf.layer)
#         elif e.dxftype() == "CIRCLE":
#             center = e.dxf.center
#             radius = e.dxf.radius
#             points = [
#                 [center.x + radius * cos(a), center.y + radius * sin(a)]
#                 for a in [i * 2 * pi / 36 for i in range(37)]
#             ]
#             writer.poly([points])
#             writer.record(e.dxf.layer)
#         elif e.dxftype() == "LWPOLYLINE":
#             points = [[v[0], v[1]] for v in e.get_points()]
#             if e.closed:
#                 writer.poly([points])
#             else:
#                 writer.line([points])
#             writer.record(e.dxf.layer)
#         # ‚ûï Ajouter d‚Äôautres g√©om√©tries si besoin

#     writer.close()

#     # üì¶ Cr√©ation ZIP
#     zip_path = os.path.join(OUTPUT_FOLDER, f"{base_name}.zip")
#     with zipfile.ZipFile(zip_path, "w") as zipf:
#         for ext in ["shp", "shx", "dbf"]:
#             file_path = f"{shp_path}.{ext}"
#             zipf.write(
#                 file_path,
#                 arcname=os.path.basename(file_path)
#             )

#     return FileResponse(
#         zip_path,
#         filename=f"{base_name}.zip",
#         media_type="application/zip"
#     )


OUTPUT_FOLDER = "outputs"
os.makedirs(OUTPUT_FOLDER, exist_ok=True)

@app.post("/convert-dxf-to-shp/")
async def convert_dxf_to_shp(file: UploadFile = File(...)):
    try:
        # üîΩ Sauvegarde temporaire du DXF
        dxf_path = os.path.join(OUTPUT_FOLDER, file.filename)
        with open(dxf_path, "wb") as f:
            f.write(await file.read())

        # üìê Lecture du DXF
        doc = ezdxf.readfile(dxf_path)
        msp = doc.modelspace()

        geojson = {
            "type": "FeatureCollection",
            "features": []
        }

        def add_feature(geom_type, coords, layer):
            feature = {
                "type": "Feature",
                "properties": {"layer": layer},
                "geometry": {
                    "type": geom_type,
                    "coordinates": coords
                }
            }
            geojson["features"].append(feature)

        for e in msp:
            if e.dxftype() == "LINE":
                start = e.dxf.start
                end = e.dxf.end
                coords = [[start.x, start.y], [end.x, end.y]]
                add_feature("LineString", coords, e.dxf.layer)

            elif e.dxftype() == "CIRCLE":
                center = e.dxf.center
                radius = e.dxf.radius
                # approximer en polygone
                points = [
                    [
                        center.x + radius * cos(a),
                        center.y + radius * sin(a)
                    ] for a in [i * 2 * pi / 36 for i in range(37)]
                ]
                add_feature("Polygon", [points], e.dxf.layer)

            elif e.dxftype() == "LWPOLYLINE":
                points = [[v[0], v[1]] for v in e.get_points()]
                if e.closed:
                    add_feature("Polygon", [points], e.dxf.layer)
                else:
                    add_feature("LineString", points, e.dxf.layer)

            elif e.dxftype() == "POINT":
                p = e.dxf.location
                add_feature("Point", [p.x, p.y], e.dxf.layer)

            # ‚ûï Ajouter d‚Äôautres types ici (ARC, ELLIPSE‚Ä¶)

        # si tu veux nettoyer le fichier temporaire
        # os.remove(dxf_path)

        return JSONResponse(content=geojson)

    except Exception as e:
        return JSONResponse(
            content={"error": str(e)},
            status_code=500
        )